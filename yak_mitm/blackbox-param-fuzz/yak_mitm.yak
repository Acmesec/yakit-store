# mitm plugin template
#--------------------------WORKSPACE-----------------------------
__test__ = func() {
    results, err := yakit.GenerateYakitMITMHooksParams("GET", "https://example.com?key1=1&key2=123123")
    if err != nil {
        return
    }
    isHttps, url, reqRaw, rspRaw, body = results

    mirrorFilteredHTTPFlow(results...)
    mirrorNewWebsitePathParams(results...)
}

/*
type palm/common/mutate.(FuzzHTTPRequestParam) struct {
  Fields(可用字段):
  StructMethods(结构方法/函数):
  PtrStructMethods(指针结构方法/函数):
      func Fuzz(v1 ...interface {}) return(mutate.FuzzHTTPRequestIf)
      func IsCookieParams() return(bool)
      func IsGetParams() return(bool)
      func IsPostParams() return(bool)
      func Name() return(string)
      func Position() return(string)
      func PositionVerbose() return(string)
      func Repeat(v1: int) return(mutate.FuzzHTTPRequestIf)
      func Value() return(interface {})
}
*/

/*
type palm/common/mutate.(FuzzHTTPRequest) struct {
  Fields(可用字段):
      Opts: []mutate.BuildFuzzHTTPRequestOption
  StructMethods(结构方法/函数):
  PtrStructMethods(指针结构方法/函数):
      func Exec(v1 ...func httpPoolConfigOption(v1: *mutate.httpPoolConfig) ) return(chan *mutate._httpResult, error)
      func FuzzCookie(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzCookieRaw(v1: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzFormEncoded(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzGetParams(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzGetParamsRaw(v1 ...string) return(mutate.FuzzHTTPRequestIf)
      func FuzzHTTPHeader(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzMethod(v1 ...string) return(mutate.FuzzHTTPRequestIf)
      func FuzzPath(v1 ...string) return(mutate.FuzzHTTPRequestIf)
      func FuzzPostJsonParams(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzPostParams(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func FuzzPostRaw(v1 ...string) return(mutate.FuzzHTTPRequestIf)
      func FuzzUploadFile(v1: interface {}, v2: interface {}, v3: []uint8) return(mutate.FuzzHTTPRequestIf)
      func FuzzUploadFileName(v1: interface {}, v2: interface {}) return(mutate.FuzzHTTPRequestIf)
      func GetCommonParams() return([]*mutate.FuzzHTTPRequestParam)
      func GetCookieParams() return([]*mutate.FuzzHTTPRequestParam)
      func GetGetQueryParams() return([]*mutate.FuzzHTTPRequestParam)
      func GetOriginHTTPRequest() return(*http.Request, error)
      func GetPostJsonParams() return([]*mutate.FuzzHTTPRequestParam)
      func GetPostParams() return([]*mutate.FuzzHTTPRequestParam)
      func IsBodyFormEncoded() return(bool)
      func IsBodyJsonEncoded() return(bool)
      func IsBodyUrlEncoded() return(bool)
      func IsEmptyBody() return(bool)
      func ParamsHash() return(string, error)
      func Repeat(v1: int) return(mutate.FuzzHTTPRequestIf)
      func Results() return([]*http.Request, error)
      func Show()
}
*/

# mirrorFilteredHTTPFlow 劫持到的流量为 MITM 自动过滤出的可能和 "业务" 有关的流量，会自动过滤掉 js / css 等流量
mirrorFilteredHTTPFlow = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    freq, err := fuzz.HTTPRequest(req, fuzz.https(isHttps))
    die(err)

    token := str.RandStr(10)
    regexp = re.MustCompile(str.f(`%v(.*)%v`, token, token))
    doubleToken = str.f("%v%v", token, token)

    params = freq.GetGetQueryParams()
    params = append(params, freq.GetPostParams()...)
    params = append(params, freq.GetPostJsonParams()...)

    for _, p := range params {
        res, err := p.Fuzz(doubleToken).Exec()
        if err != nil {
            continue
        }
        for result = range res {
            outputs = regexp.FindAllSubmatch([]byte(result.ResponseRaw), -1)
            if len(outputs) > 0 {
                yakit_output({
                    "url": result.Url,
                    "param_name": p.Name(),
                    "param_original_value": sprint(p.Value()),
                    "param_position": p.Position(),
                    "token": token,
                    "outputs_length": len(outputs),
                })
            }
        }
    }
}

# mirrorNewWebsitePathParams 每新出现一个网站路径且带有一些参数，参数通过常见位置和参数名去重，去重的第一个 HTTPFlow 在这里被调用
mirrorNewWebsitePathParams = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    
}
