yakit.AutoInitYakit()

// 解析参数
targets := cli.String("targets", cli.setRequired(true))
targetList := str.ParseStringToHosts(targets)
threadNum := cli.Int("threadNum", cli.setDefault(20))

// 打开mmdb
path, _ := os.Executable()
geoip, err := mmdb.Open(file.Join(path, "..", "..", "GeoIP2-City.mmdb"))
die(err)

// 获取ip对应的城市
getIPCity := func(ip) {
    // 数据库中查询，并处理成map[string]string
    ipInfo := mmdb.QueryIPCity(geoip, ip)[0]
    ipInfo = json.loads(json.dumps(ipInfo))

    country := ipInfo.Country["Names"]["zh-CN"]
    // 无省级单位时
    if ipInfo.Subdivisions != nil {
        subdivisions := ipInfo.Subdivisions[0]["Names"]["zh-CN"]
    }else {
        subdivisions := ""
    }

    // 美国、日本等ip没有城市名
    if len(ipInfo.City["Names"]) > 0 {
        city := ipInfo.City["Names"]["zh-CN"]
    }else {
        city := ""
    }

    // 拼接，去除多余空格
    ipCity := sprintf("%v %v %v", country, subdivisions, city)
    ipCity := str.Join(str.Fields(ipCity), " ")

    return ipCity
}

// 将jsonp解析成json
convertJsonp2Json := func(s) {
    r1, _ := re.Compile(`.*?\(({.*?})\)`)
    result := r1.FindStringSubmatch(s)
    if len(result) == 0 {
        die(s)
    }
    jsObject := result[1]
    
    kvRe, _ := re.Compile(`([a-zA-Z0-9_]*?)(:['\[{"\d+])`)
    kv := kvRe.FindAllStringSubmatch(jsObject, -1)

    for _, result := range kv {
        // println(result[0])
        jsObject = str.Replace(jsObject, result[0], sprintf(`'%v'%v`, result[1], result[2]), 1)
    }
    jsObject = str.ReplaceAll(jsObject, `'`, `"`)
    d, err := json.New(jsObject)
    if err != nil {
        println(s)
    }
    return d.Value()
}

// 字典转url query格式，带urlencode
dict2UrlQueryWithUrlEncode := func(d) {
    s := make([]string)
    for k, v := range d {
        s = append(s, sprintf("%v=%v", k, codec.EscapeQueryUrl(v)))
    }
    return str.Join(s, "&")
}

// 获取guid enkey等信息
getInitConfig := func() {
    datas := dict2UrlQueryWithUrlEncode({
        "host": "example.com",
        "linetype": "电信,多线,联通,移动,其他",
    })
    // 请求接口获取配置
    res, err := http.Request("POST", "http://mping.chinaz.com/?host=example.com", http.body(datas), http.header("Content-Type", "application/x-www-form-urlencoded"))
    die(err)

    // 解析html dom
    resBody := string(http.GetAllBody(res))
    dom, err := xpath.LoadHTMLDocument(resBody)
    die(err)

    // 获取到guid以及监测点名字
    servers, _ := xpath.QueryAll(dom, `//*[@class="listw"]`)
    if len(servers) == 0 {
        die("get guid failure")
    }
    pingServerInfoList := make([]map[string]string)
    for _, server := range servers {
        // 监测点名字
        city, _ := xpath.Query(server, `//*[@name="city"]`)
        name := xpath.OutputHTML(city)
        // 监测点guid
        guid := xpath.SelectAttr(server, "id")
        pingServerInfoList = append(pingServerInfoList, {
            "name": name,
            "guid": guid,
        })
        // println(pingServerInfoList)
    }
    
    // 获取enkey参数
    enkeyInput, _ := xpath.Query(dom, `//*[@id="enkey"]`)
    if len(servers) == 0 {
        die("get enkey failure")
    }
    enkey := xpath.SelectAttr(enkeyInput, "value")
    
    return pingServerInfoList, enkey
}

// 获取域名的cdn提供商
getTargetCDNType := func(target, enkey) {
    // https://ping.chinaz.com/ajaxseo.aspx?t=cdn&host=www.baidu.com&enkey=YSFGg|EDs09FR4sfKk2y6L22aoCStB9D
    res, err := http.Request("GET", sprintf(`https://ping.chinaz.com/ajaxseo.aspx?t=cdn&host=%v&enkey=%v`, target, enkey), http.header("Referer", "http://mping.chinaz.com/"), http.timeout(5))
    if err != nil {
        return "获取超时"
    }
    resBody := string(http.GetAllBody(res))

    jsonStyleRes := convertJsonp2Json(resBody)
    // println(jsonStyleRes)
    if jsonStyleRes["result"] == undefined {
        return "未知"
    }
    return jsonStyleRes["result"][0]["type"]
}

// 让监测点开始ping操作
ping := func(sizedWg, serverInfo, enkey, target, results) {
    defer sizedWg.Done()
    datas := dict2UrlQueryWithUrlEncode({
        "guid": serverInfo["guid"],
        "host": target,
        "encode": enkey,
        "ishost": "0",
        "checktype": "0",
    })
    res, err := http.Request("POST", "http://mping.chinaz.com/Handle/AjaxHandler.ashx?action=Ping", http.body(datas), http.header("Content-Type", "application/x-www-form-urlencoded"))
    die(err)
    resBody := string(http.GetAllBody(res))

    jsonStyleRes := convertJsonp2Json(resBody)
    jsonStyleRes["name"] = serverInfo["name"]
    results <- jsonStyleRes
    // println(jsonStyleRes)
}

# ----------------------------------Main----------------------------------

pingServerInfoList, enkey := getInitConfig()
serverNum := len(pingServerInfoList)
yakit.Info(sprintf("初始化成功，共获取到%v个监测点\n", serverNum))

for targetIndex, target := range targetList {
    cdnType := getTargetCDNType(target, enkey)
    yakit.StatusCard(sprintf("%v:CDN厂商", targetIndex+1), cdnType, target)
    // printf("CDN厂商: %v(%v)\n", target, cdnType)

    // 收集结果
    results := make(chan var)
    go func(){
        yakit.EnableTable(target, ["监测点", "响应IP", "IP归属地", "响应时间", "TTL", "数据包大小"])
        ips := make(map[string]int)
        for i := 0; i < serverNum; i++ {
            data := <- results

            // 总进度条
            yakit.SetProgress( float64(i+1)*float64(targetIndex+1) / (float64(len(targetList)) * float64(serverNum)) )
            // 子任务进度条
            yakit.SetProgressEx(target, float64(i+1)/float64(serverNum))

            // 处理数据
            if data["state"] == float64(1) {
                if data["result"]["ip"] != "" {
                    ipCity := getIPCity(data["result"]["ip"])
                    data["result"]["ipaddress"] = ipCity
                    if ips[data["result"]["ip"]] == undefined {
                        ips[data["result"]["ip"]] = 1
                    }else {
                        ips[data["result"]["ip"]]++
                    }
                    if str.Contains(data["result"]["responsetime"], "超时") {
                        data["result"]["responsetime"] = "超时"
                    }
                    if str.Contains(data["result"]["ttl"], "超时") {
                        data["result"]["ttl"] = "超时"
                    }
                    if data["result"]["bytes"] == "" {
                        data["result"]["bytes"] = "-"
                    }
                }
                // 成功的探测点输出表格
                tableData := make(map[string]var)
                tableData["监测点"] = data["name"]
                tableData["响应IP"] = data["result"]["ip"]
                tableData["IP归属地"] = data["result"]["ipaddress"]
                tableData["响应时间"] = data["result"]["responsetime"]
                tableData["TTL"] = data["result"]["ttl"]
                tableData["数据包大小"] = data["result"]["bytes"]
                yakit.Output(yakit.TableData(target, tableData))
            }
            // printf("\r正在执行ping操作，当前：%v/%v个，总进度：%.2f%%", i+1, serverNum, 100*(float64(i+1)/float64(serverNum)))
        }
    }()

    // 开启任务
    sizedWg := sync.NewSizedWaitGroup(threadNum)
    submitTask := func(param...) {
        sizedWg.Add()
        go ping(sizedWg, param...)
    }
    for _, serverInfo := range pingServerInfoList {
        submitTask(serverInfo, enkey, target, results)
        // break
    }
    sizedWg.Wait()

    // 等待收集结果的goroutine工作完毕
    sleep(0.5)

    // 判断是否CDN
    // println()
    if len(ips) > 1 {
        yakit.StatusCard(sprintf("%v:是否存在CDN", targetIndex+1), "是", target)
        yakit.StatusCard(sprintf("%v:返回IP数量", targetIndex+1), len(ips), target)
    }else {
        yakit.StatusCard(sprintf("%v:是否存在CDN", targetIndex+1), "否", target)
        for ip := range ips {
            yakit.StatusCard(sprintf("%v:返回IP", targetIndex+1), ip, target)
        }
    }
}